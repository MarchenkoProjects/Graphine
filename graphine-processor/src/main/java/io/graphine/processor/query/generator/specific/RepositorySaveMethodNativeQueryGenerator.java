package io.graphine.processor.query.generator.specific;

import io.graphine.processor.metadata.model.entity.EntityMetadata;
import io.graphine.processor.metadata.model.entity.attribute.AttributeMetadata;
import io.graphine.processor.metadata.model.repository.method.MethodMetadata;
import io.graphine.processor.query.model.NativeQuery;

import java.util.List;

import static io.graphine.processor.util.StringUtils.join;
import static io.graphine.processor.util.StringUtils.repeat;
import static java.util.stream.Collectors.toList;

/**
 * @author Oleg Marchenko
 */
public final class RepositorySaveMethodNativeQueryGenerator extends RepositoryMethodNativeQueryGenerator {
    public RepositorySaveMethodNativeQueryGenerator(EntityMetadata entity) {
        super(entity);
    }

    @Override
    public NativeQuery generate(MethodMetadata method) {
        List<String> columns =
                entity.getAttributes(entity.getIdentifier().isAutogenerated())
                      .stream()
                      .map(AttributeMetadata::getColumn)
                      .collect(toList());

        String query = new StringBuilder()
                .append("INSERT INTO ")
                .append(entity.getQualifiedTable())
                .append(join(columns, ", ", "(", ")"))
                .append(" VALUES ")
                .append(repeat("?", ", ", "(", ")", columns.size()))
                .toString();
        return new NativeQuery(query);
    }
}
